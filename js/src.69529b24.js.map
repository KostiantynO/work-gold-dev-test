{"version":3,"sources":["js/menu-focus-catch.js","js/mobile-menu.js","js/event-listeners.js","index.js"],"names":["refs","menu","document","querySelector","openMenuBtn","closeMenuBtn","htmlAndBody","querySelectorAll","mobileFocusElem","focusableContent","firstFocusElem","lastFocusElem","length","onKeyDownCatchFocus","e","classList","contains","getAttribute","code","shiftKey","activeElement","preventDefault","focus","listenOnKeydownFocusCatch","addEventListener","unlistenOnKeydownFocusCatch","removeEventListener","isMenuOpen","toggleMenu","setAttribute","toggle","forEach","el","closeMenu","setTimeout","onEscCloseMenu","onBackdropClick","target","onCloseMenuBtnClick","onOpenMenuBtnClick","once","console","log","listenOnOpenMenuBtnClick","initEventListeners"],"mappings":"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","file":"src.69529b24.js","sourceRoot":"../../src","sourcesContent":["const refs = {\n  menu: document.querySelector('[mobile-menu]'),\n  openMenuBtn: document.querySelector('[mobile-menu-open]'),\n  closeMenuBtn: document.querySelector('[mobile-menu-close]'),\n  htmlAndBody: document.querySelectorAll('[no-scroll]'),\n};\n\n// adds all elements to focus in mobile menu\nconst mobileFocusElem =\n  \"button, a[href], input, select, textarea, [tabindex]:not([tabindex='-1'])\";\n\nconst focusableContent = refs.menu?.querySelectorAll(mobileFocusElem);\n\nconst firstFocusElem = focusableContent[0]; // first el to focus in menu\nconst lastFocusElem = focusableContent[focusableContent.length - 1]; // last el to focus in menu\n\nconst onKeyDownCatchFocus = e => {\n  if (\n    refs.menu.classList.contains('visually-hidden') ||\n    refs.openMenuBtn.getAttribute('aria-expanded') !== 'false'\n  )\n    return;\n  else {\n    if (e.code !== 'Tab') return;\n\n    // Shift + tab\n    if (e.shiftKey) {\n      if (document.activeElement === firstFocusElem) {\n        e.preventDefault(), lastFocusElem.focus();\n      }\n    } else if (document.activeElement === lastFocusElem) {\n      // if Tab and focus reached last el -> focus first el.\n      e.preventDefault(), firstFocusElem.focus();\n    }\n  }\n};\n\nconst listenOnKeydownFocusCatch = () => {\n  refs.menu?.addEventListener('keydown', onKeyDownCatchFocus);\n};\n\nconst unlistenOnKeydownFocusCatch = () => {\n  refs.menu?.removeEventListener('keydown', onKeyDownCatchFocus);\n};\n\nexport {\n  listenOnKeydownFocusCatch,\n  firstFocusElem,\n  unlistenOnKeydownFocusCatch,\n  refs,\n};\n","import {\n  listenOnKeydownFocusCatch,\n  firstFocusElem,\n  unlistenOnKeydownFocusCatch,\n  refs,\n} from './menu-focus-catch.js';\n\nconst isMenuOpen = () =>\n  refs.openMenuBtn.getAttribute('aria-expanded') || false;\n\nconst toggleMenu = () => {\n  refs.openMenuBtn.setAttribute('aria-expanded', !isMenuOpen());\n  refs.menu?.classList.toggle('visually-hidden');\n  refs.htmlAndBody.forEach(el => el.classList.toggle('no-scroll'));\n};\n\nconst closeMenu = () => {\n  setTimeout(() => {\n    toggleMenu();\n    document.removeEventListener('keydown', onEscCloseMenu);\n    refs.menu.removeEventListener('click', onBackdropClick);\n    unlistenOnKeydownFocusCatch();\n\n    refs.openMenuBtn.focus();\n  }, 10);\n};\n\nconst onBackdropClick = e => {\n  if (isMenuOpen() && e.target === refs.menu) {\n    closeMenu();\n  }\n};\n\nconst onCloseMenuBtnClick = () => {\n  closeMenu();\n};\n\nconst onEscCloseMenu = e => {\n  e.code === 'Escape' && closeMenu();\n};\n\nconst onOpenMenuBtnClick = ({ target }) => {\n  if (!isMenuOpen()) {\n    return;\n  }\n\n  toggleMenu();\n\n  refs.closeMenuBtn?.addEventListener('click', onCloseMenuBtnClick, {\n    once: true,\n  });\n\n  refs.menu?.addEventListener('click', onBackdropClick);\n\n  document.addEventListener('keydown', onEscCloseMenu);\n\n  listenOnKeydownFocusCatch();\n  setTimeout(() => {\n    firstFocusElem.focus();\n\n    console.log(\n      'onOpenMenuBtnClick ~ firstFocusElem',\n      firstFocusElem,\n      document.activeElement === firstFocusElem,\n    );\n  }, 100);\n};\n\nconst listenOnOpenMenuBtnClick = () =>\n  refs.openMenuBtn?.addEventListener('click', onOpenMenuBtnClick);\n\nexport { listenOnOpenMenuBtnClick };\n","import { listenOnOpenMenuBtnClick } from './mobile-menu';\n\nconst initEventListeners = () => {\n  listenOnOpenMenuBtnClick();\n};\n\nexport { initEventListeners };\n","import './sass/main.scss';\nimport { initEventListeners } from './js/event-listeners.js';\ninitEventListeners();\n"]}